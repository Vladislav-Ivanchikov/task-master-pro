// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  surname   String
  avatarUrl String?  @default("https://example.com/default-avatar.png") // URL по умолчанию для аватара
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  ownedBoards   Board[]       @relation("OwnedBoards")
  memberships   BoardMember[]
  createdTasks  Task[]        @relation("CreatedTasks")
  assignedTasks Task[]        @relation("AssignedTasks")
}

model Board {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  owner   User          @relation("OwnedBoards", fields: [ownerId], references: [id])
  ownerId String
  members BoardMember[]
  tasks   Task[]
}

model BoardMember {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  board     Board    @relation(fields: [boardId], references: [id])
  boardId   String
  role      Role     @default(USER)
  createdAt DateTime @default(now())

  @@unique([userId, boardId])
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String
  status      TaskStatus @default(TODO)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Связи
  board      Board  @relation(fields: [boardId], references: [id])
  boardId    String
  creator    User   @relation("CreatedTasks", fields: [creatorId], references: [id])
  creatorId  String
  assignee   User   @relation("AssignedTasks", fields: [assigneeId], references: [id])
  assigneeId String
}
