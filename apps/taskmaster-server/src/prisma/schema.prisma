// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  PENDING_REVIEW
  DONE
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  password     String
  name         String?
  surname      String?
  avatarUrl    String?
  role         Role           @default(USER)
  ownedBoards  Board[]        @relation("BoardOwner")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  BoardMember  BoardMember[]
  TaskAssignee TaskAssignee[]
  notes        TaskNote[]
}

model Board {
  id          String        @id @default(cuid())
  title       String
  description String?
  ownerId     String
  owner       User          @relation("BoardOwner", fields: [ownerId], references: [id])
  members     BoardMember[]
  tasks       Task[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String?
}

model BoardMember {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  board     Board    @relation(fields: [boardId], references: [id])
  boardId   String
  role      Role     @default(USER)
  createdAt DateTime @default(now())

  @@unique([userId, boardId])
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  boardId     String
  creatorId   String
  board       Board      @relation(fields: [boardId], references: [id])
  status      TaskStatus @default(TODO)
  notes       TaskNote[]
  files       String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  assignees TaskAssignee[]
}

model TaskAssignee {
  id     String @id @default(cuid())
  task   Task   @relation(fields: [taskId], references: [id])
  taskId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  assignedAt DateTime @default(now())

  @@unique([taskId, userId]) // один пользователь не может быть назначен дважды
}

model TaskNote {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
}
